using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NOnion;
using NOnion.Utility;
using NOnion.Cells;
using NUnit.Framework;

namespace DotNetOnion.Tests
{
    public class CellSerialization
    {
        private readonly string[] CellTestVectors = {
            "07000300040005",
            "810501024630820242308201aba00302010202090092aa2413de808ecc300d06092a864886f70d01010b050030233121301f06035504030c187777772e796874716963356236737768336978612e636f6d301e170d3231303630313030303030305a170d3231303932323030303030305a301f311d301b06035504030c147777772e36616d72636b6d69353770762e6e657430820122300d06092a864886f70d01010105000382010f003082010a0282010100a8f71e0fa058c46b17f6d35d5230266c3cb58b254b50ce2d608f37f26c4cc63efc9a9962b382895464f6ff0c80417967bd62042c5fe9a44bf68e883bf23c747f48caeadb4b0a733dbb988ae2fc2101c55d0847dae5355c10798bb549dd53d8152c025c67980c71d8350047fb81b520a7b2ad7497c1799736109f6ff470bc3d7858f2b4e3f9c2b5bafd96ebd6a300242e4114f680b84bf55b3943c86c1d2f169d8db2f40817b6189611b9a8ef0ffd28b623e1e81482277bbe71fa782ad929b711d72b3ac598ec3be1e9df3e5f6f34164003d9c45b1aba01d91c501534f2ee2ec2c0dc3723155fab5999881553e44d6e0cf69b0c5b8afd98dff141b1e733a126d10203010001300d06092a864886f70d01010b050003818100092bbfc416a87d946b66b7f39540ce41deb3c36a668b12744b04d92718ef2532d1c6b0df89848f9181b6652c5f4ad96a0b2a5d22d1790b36059ed35abb29c2551f7d9fbf9af3e027dc7cc90488f1a4e02da0e13938be9453dcf837ecffd5b5fc5d856e33f02e995545ea2fc5a6fa4fb577022b36df0859ed8ddc0c1d50b826820201c6308201c23082012ba003020102020900c12fc17db0beedf9300d06092a864886f70d01010b050030233121301f06035504030c187777772e796874716963356236737768336978612e636f6d301e170d3231303332393030303030305a170d3232303332393030303030305a30233121301f06035504030c187777772e796874716963356236737768336978612e636f6d30819f300d06092a864886f70d010101050003818d0030818902818100a2fcb98c60615cda1cec7f139ab2babb48c39d85588dd936cde9793df4d895ee100f9f2b05e987d52ba53f4062bd9fb5c52c2ca300aa37aaa5fbc8cc2aa9452c4b8555859f0a5026e9162c2cea7326402733471690a27515b17dbc35be8b14f9a3f9fe6c1b0cb7f3177e35ec20cf706d8fd18796d1f671cf953fc49d99c00d8d0203010001300d06092a864886f70d01010b0500038181006e7870b332f976726055ae395206709310244bdddca9aff20986f3a26604674e4beba2ff1b1b783b6fe4f789b246a7401cdea776e8760a6114d4c756b8de80c4d0a1579dcfaccfb57062a81027a3eae88f48cea8c58e104c3ecf791e350cb277b1fa92af4ed44c41a91a1d8edbfdc261aefa95eabee16be584fe2f869db1516c04008c01040006e5b30102b4fc0606eaca3088037bad7bc7d501f6cfa9ecbcccc5fc3afb69132e51074401002004007982ba6d88ca36214bdc7576989a5bfc11e528fe2ee0fe295f4941605b8370c99dd440b2ecf1cb8cf370425e58a9d00498c74f61a40b0982a3d13faceba207245c53ff4e3ceab881b4fb68d5157bbe3c0eff99e3735bd260adae04f26c2f6e0005006801050006e3f503bfb943001db908ccc3a02a6bf04427517c6880e1d556354b2f285e8a40fced6e006268b8f780ecc48197c91ae7068c78f3f1d4604d20afbe933cda7e1748c8235b41194d19a3b8e25ff8166a4c379d148de6b792adecf2929564fb4397bab21c010700a57982ba6d88ca36214bdc7576989a5bfc11e528fe2ee0fe295f4941605b8370c90006f32180249d6581d0a5bd95273aceddb9809d1340153541dcb47cd86546be060a7eb8f14e0b43ddb9be87cf184058f96c4571ed14dcd03dd3d8838d9e2f86b794d8c6c62a8c9fb585772c70849076fe8913c61167dbd6ca67237e00900c730a78c6b9e6b5dbfac9692961c70426a032567ce39e8bdd4699fbce5551224c85288a0dfb48",
            "829847ecb5d6fbbbfe97ef6f9823daf8ada98c5195e3308e61d4a9fb7d0846fc1d000200010003",
            "0860e30b500404c27fad25020404c3b0031306102001062020d
            "0583ee1949c044bd962a7a24d8b557b9e2106d312e
            "0602e1b741841296c7ed912aef679d2cbc3274d03e4fc48d2197ad5c931c5ba91a0f9feba2e446d
        };

        [SetUp]
        public void Setup()
        {
        }

        [Test]
        public void TryToDeserialzeAndSerializeCells()
        {
            foreach (var testHexString in CellTestVectors)
            {
                var testBytes = Hex.ToByteArray(testHexString);

                ICell cell;
                using (MemoryStream payloadStream = new MemoryStream(testBytes))
                using (BinaryReader payloadReader = new BinaryReader(payloadStream))
                {
                    var command = payloadReader.ReadByte();
                    cell = Command.DeserializeCell(payloadReader, command);
                }

                using (MemoryStream payloadStream = new MemoryStream())
                using (BinaryWriter payloadWriter = new BinaryWriter(payloadStream))
                {
                    payloadWriter.Write(cell.Command);
                    Command.SerializeCell(payloadWriter, cell);

                    if (!Command.IsVariableLength(cell.Command))
                    {
                        // +1 because in this test we are writing the command in the same stream
                        byte[] padding = new byte[Constants.FixedPayloadLength + 1 - payloadWriter.BaseStream.Position];
                        payloadWriter.Write(padding);
                    }

                    CollectionAssert.AreEqual(payloadStream.ToArray(), testBytes);
                }
            }
        }

    }
}
